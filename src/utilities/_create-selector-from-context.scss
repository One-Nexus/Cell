/// Used to create a selector from context() arguments
///
/// @param {string} $block - The name of the module/component that has the context
/// @param {string} $context - The context you wish to test
@function create-selector-from-context($block, $context: null, $pipeContexts: false) {
  $selector: ();
  $pipedContexts: '';
  $excludeRootSelector: false;

  @if type-of($block) == 'list' {
    $block-from-list: false;
    @each $item in $block {
      $block-from-list: if($block-from-list, '#{$block-from-list}#{$componentGlue}#{$item}', $item);
    }
    $block: $block-from-list;
  }

  @if $context {
    @each $item in $context {
      @if $pipeContexts {
        @if str-index($item, ':') == 1 {
          $pipedContexts: $pipedContexts + $item;
        }
        @else {
          $excludeRootSelector: true;
          $pipedContexts: $pipedContexts + '[class*="#{$modifierGlue}#{$item}"]';
        }
      }
      @else {
        @if str-index($item, ':') == 1 {
          $selector: append($selector, '.#{$block}#{$item}', comma);
          $selector: append($selector, '[class*="#{$block}#{$modifierGlue}"]#{$item}', comma);
        }
        @else {
          $selector: append($selector, '[class*="#{$block}#{$modifierGlue}"][class*="#{$modifierGlue}#{$item}"]', comma);
        }
      }
    }
  }
  @else {
    $selector: append($selector, '.#{$block}', comma);
    $selector: append($selector, '[class*="#{$block}#{$modifierGlue}"]', comma);
  }

  @if $pipeContexts {
    @if $excludeRootSelector {
      $selector: '[class*="#{$block}#{$modifierGlue}"]#{$pipedContexts}';
    }
    @else {
      $selector: '.#{$block}#{$pipedContexts}, [class*="#{$block}#{$modifierGlue}"]#{$pipedContexts}';
    }
  }

  @return $selector;
}
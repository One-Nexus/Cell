@use "sass:list";
@use "sass:meta";
@use "sass:string";

/// Used to create a selector from context() arguments
///
/// @param {string|list} $block - The name of the module/component that has the context
/// @param {string} $context - The context you wish to test
/// @param {bool} $pipeContexts - Pipe modifier chunks together
@function create-context-selector(
  $block,
  $context: null,
  $modifierGlue,
  $componentGlue,
  $pipeContexts: false
) {
  $selector: ();
  $pipedContexts: '';
  $namespace: get-namespace-from-list($block, $componentGlue);
  $chunk: '[class*=".#{$namespace}#{$modifierGlue}"]';

  @if $context == '' {
    $context: null;
  }

  // Pipe contexts together - for when they should be applied at the same time
  @if $pipeContexts {
    $excludeRootSelector: false;

    @each $item in $context {
      @if string.index($item, ':') == 1 {
        $pipedContexts: $pipedContexts + $item;
      }
      @else {
        $excludeRootSelector: true;
        $pipedContexts: $pipedContexts + '[class*="#{$modifierGlue}#{$item}"]';
      }
    }

    // unlike modifier chunks, pseudo states require the root module selector
    @if meta.type-of($block) == 'string' and not $excludeRootSelector {
      $selector: '.#{$block}#{$pipedContexts}, [class*=".#{$block}#{$modifierGlue}"]#{$pipedContexts}';
    }
    @else {
      $selector: '#{$chunk}#{$pipedContexts}';
    }
  }

  @else {
    @if $context {
      @each $item in $context {
        @if string.index($item, ':') == 1 {
          @if meta.type-of($block) == 'string' {
            $selector: list.append($selector, '.#{$block}#{$item}', comma);
          }
          $selector: list.append($selector, '#{$chunk}#{$item}', comma);
        }
        @else {
          $selector: list.append($selector, '#{$chunk}[class*="#{$modifierGlue}#{$item}"]', comma);
        }
      }
    }
    @else {
      $selector: list.append($selector, '.#{$namespace}', comma);
      $selector: list.append($selector, $chunk, comma);
    }
  }

  @return $selector;
}

/// Get the namespace from a $block list
///
/// @param {string|list} $block
@function get-namespace-from-list($block, $componentGlue) {
  @if meta.type-of($block) == 'list' {  
    $namespace: '';

    @for $i from 1 through list.length($block) {
      $item: list.nth($block, $i);
      $namespace: if($i == 1, $item, '#{$namespace}#{$componentGlue}#{$item}');
    }

    @return $namespace;
  }

  @return $block;
}
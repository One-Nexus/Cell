/// Get CSS from Sass map
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {map} $map - The map from which to get CSS
@mixin get-css-from-map($map, $sub-component: false) {
  @each $property, $value in $map {
    @if type-of($property) == 'string' {
      // $property defines new Modifier
      @if str-index($property, 'modifier(') == 1 or str-index($property, $modifierGlue) == 1 {
        @include modifier(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new Component
      @else if str-index($property, 'component(') == 1 or str-index($property, $componentGlue) == 1 {
        @include component(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new Component
      @else if str-index($property, 'sub-component(') == 1 {
        @include sub-component(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new Modifier
      @else if str-index($property, 'is-') == 1 {
        @include modifier(str-replace($property, 'is-', '')) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new Modifier on parent element
      @else if str-index($property, '-is-') {
        $component: str-slice($property, 1, str-index($property, '-is-') - 1);
        $context: str-slice($property, str-index($property, '-is-') + 4, str-length($property));

        @include context(($module, $component), $context) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new context
      @else if str-index($property, 'with-') == 1 {
        @include context($module, str-replace($property, 'with-', '')) {
          @include get-css-from-map($value);
        }
      }

      // $property defines new context
      @else if str-index($property, 'within-') == 1 {
        @include context(str-replace($property, 'within-', '')) {
          @include get-css-from-map($value);
        }
      }

      // $property defines pseudo-state/pseudo-element
      @else if str-index($property, ':') == 1 {
        @include pseudo-state(str-replace($property, ':', '')) {
          @include get-css-from-map($value);
        }
      }

      // $property defines :hover styles
      @else if $property == ':hover' {
        @include hover {
          @include get-css-from-map($value);
        }
      }

      // $property defines .active styles
      @else if $property == 'active' {
        @include modifier('active') {
          @include get-css-from-map($value);
        }
      }

      @else if type-of($value) == 'map' {
        @include component($property, $sub-component: $sub-component) {
          @include get-css-from-map($value, $sub-component: true);
        }
      }

      // $property is a valid CSS property
      @else if index($css-properties, $property) {
        @if type-of($value) != 'map' {
          #{$property}: $value;
        }
      }
    }
  }
}
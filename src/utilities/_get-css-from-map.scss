/// Get CSS from Sass map
///
/// @param {map} $map - The map from which to get CSS
@mixin get-css-from-map($map, $sub-component: false, $prevContext: false) {
  @each $property, $value in $map {
    @if type-of($property) == 'string' {
      /**
      * $property defines new Modifier
      */
      @if str-index($property, 'modifier(') == 1 or str-index($property, $modifierGlue) == 1 {
        @include modifier(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      /**
      * $property defines new Component
      */
      @else if str-index($property, 'component(') == 1 or str-index($property, $componentGlue) == 1 {
        @include component(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      /**
      * $property defines new Component
      */
      @else if str-index($property, 'sub-component(') == 1 {
        @include sub-component(get-param($property)) {
          @include get-css-from-map($value);
        }
      }

      /**
      * Determine if current node is queried modifier/state
      */
      @else if str-index($property, 'is-') == 1 {
        @include modifier(str-replace($property, 'is-', '')) {
          @include get-css-from-map($value);
        }
      }

      /**
      * Determine if parent module/block is queried modifier/state
      */
      @else if str-index($property, '$-is-') == 1 or str-index($property, '$:') == 1 {
        $context: if(str-index($property, '$:') == 1, str-replace($property, '$', ''), str-replace($property, '$-is-', ''));

        @include context($module, $context) {
          @include get-css-from-map($value);
        }
      }

      /**
       * Determine if previously specified parent component is queried modifier/state
       */
      @else if str-index($property, 'and-is-') == 1 or str-index($property, 'and:') == 1 {
        $context: if(
          str-index($property, 'and-is-'), 
          str-replace($property, 'and-is-', ''), 
          str-slice($property, str-index($property, ':'), str-length($property))
        );
        $prevContextVal: ('block': nth($prevContext, 1), 'context': nth($prevContext, 2));
        $prevChunk: create-selector-from-context(map-get($prevContextVal, 'block'), map-get($prevContextVal, 'context'));
        $newContextVal: append(map-get($prevContextVal, 'context'), $context);
        $newChunk: create-selector-from-context(map-get($prevContextVal, 'block'), $newContextVal, $pipeContexts: true);

        $selector: ();

        @each $chunk in selector-parse(str-replace(inspect($newChunk), ' ', ', ')) {
          @each $item in & {
            $selector: append($selector, selector-replace($item, nth($prevChunk, 1), $chunk), comma);
          }
        }

        @at-root {
          #{$selector} {
            @include get-css-from-map($value, $prevContext: (map-get($prevContextVal, 'block'), $newContextVal));
          }
        }
      }

      /**
      * Determine if specified parent component/module is queried modifier/state
      */
      @else if str-index($property, '-is-') or (str-index($property, ':') and str-index($property, ':') > 1) {
        $component: if(
          str-index($property, ':'),
          str-slice($property, 1, str-index($property, ':') - 1), 
          str-slice($property, 1, str-index($property, '-is-') - 1)
        );
        $contextVal: if(
          str-index($property, ':'),
          str-slice($property, str-index($property, ':'), str-length($property)),
          str-slice($property, str-index($property, '-is-') + 4, str-length($property))
        );
        $block: if(str-index($component, '$') == 1, str-slice($component, 2), $module);
        $context: if(str-index($component, '$') == 1, ($block, $contextVal), (($block, $component), $contextVal));

        @include context($context...) {
          @include get-css-from-map($value, $prevContext: $context);
        }
      }

      /**
      * Determine if current node is a child of the queried component/module,
      * and set the queried component/module as the new context
      */
      @else if str-index($property, 'with-') == 1 {
        $component: str-replace($property, 'with-', '');
        $context: if(str-index($component, '$') == 1, str-slice($component, 2), ($module, $component));

        @include context($context) {
          @include get-css-from-map($value);
        }
      }

      /**
      * $property defines pseudo-state/pseudo-element
      */
      @else if str-index($property, ':') == 1 {
        @include pseudo-state(str-replace($property, ':', '')) {
          @include get-css-from-map($value);
        }
      }

      /**
      * $property defines :hover styles
      */
      @else if $property == ':hover' {
        @include hover {
          @include get-css-from-map($value);
        }
      }

      /**
      * $property defines .active styles
      */
      @else if $property == 'active' {
        @include modifier('active') {
          @include get-css-from-map($value);
        }
      }

      @else if type-of($value) == 'map' {
        @include component($property, $sub-component: $sub-component) {
          @include get-css-from-map($value, $sub-component: true);
        }
      }

      // $property is a valid CSS property
      @else if index($css-properties, $property) {
        @if type-of($value) != 'map' {
          #{$property}: $value;
        }
      }
    }
  }
}
@use "sass:selector";
@use "sass:string";
@use "sass:list";

@use "node_modules/Sass-Boost/dist/sass-boost";

@use "../utilities/utils";

/// Create a component based off the main module
///
/// @param {string|list} $components - The component or components to be used
/// @param {map} $content
/// @param {bool} $sub-component
/// @param {string} $glue
/// @param {bool} $cascade
@mixin component(
  $components: null,
  $content: (),
  $sub-component: false,
  $glue: $componentGlue,
  $cascade: true
) {
  $prev-namespace: utils.get-namespace(&, $modifierGlue);
  $module-name: utils.get-module($prev-namespace, $componentGlue);
  $selectors: '[class*="#{$module-name}#{$glue}"]';
  $parents: ();

  @if $components {
    $selectors: ();

    @each $component in $components {
      $new-namespace: #{if($sub-component, $prev-namespace, $module-name)}#{$glue}#{$component};

      @if $cascade {
        $selectors: list.join($selectors, ".#{$new-namespace}", comma);
        $selectors: list.join($selectors, "[class*='#{$new-namespace}#{$modifierGlue}']", comma);
      } @else {
        $selectors: list.join($selectors, "> .#{$new-namespace}", comma);
        $selectors: list.join($selectors, "> [class*='#{$new-namespace}#{$modifierGlue}']", comma);
      }
    }
  }

  @each $selector in & {
    // spoof the selector into a list
    $selector: selector.parse(sass-boost.str-replace(#{$selector}, " ", ", "));

    $last-item: list.nth($selector, list.length($selector));
    $is-modifier: string.index(#{$last-item}, '[class*="#{$modifierGlue}');
    $is-pseudo-state: string.index(#{$last-item}, ":");

    @if not($is-modifier or $is-pseudo-state) {
      $selector: sass-boost.list-remove($selector, $last-item);
    }

    // Re-build the parent selector
    @if list.length($selector) > 0 {
      $parents: list.append($parents, sass-boost.str-replace(#{$selector}, ", ", " "), comma);
    }
  }

  $parents: sass-boost.list-remove-duplicates($parents);

  @if list.length($parents) == 0 {
    @at-root #{$selectors} {
      @content;

      @include parse-cq($content);
    }
  } @else {
    @at-root #{$parents} {
      #{$selectors} {
        @content;

        @include parse-cq($content);
      }
    }
  }
}

/// Alis for `component` mixin with $sub-component: true
///
/// @param {string|list} $components
/// @param {map} $content
/// @param {string} $glue
@mixin sub-component($components: null, $content: (), $glue: $componentGlue) {
  @include component($components, $content, true, $glue) {
    @content;
  }
}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
@mixin components($args...) {
  @include component($args...) {
    @content;
  }
}

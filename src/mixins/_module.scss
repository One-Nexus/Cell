@use "sass:list";
@use "sass:map";
@use "sass:meta";

/// Create a new module
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {map} $content
@mixin module(
  $modules,
  $content: (),
  $config: ()
) {
  $nested: &; // @TODO needs to identify if nested within itself, not nested in general
  $selectors: ();

  @if not $modules or meta.type-of($modules) == 'map' {
    $modules: map.get($config, 'name');
  }

  @if ($moduleNamespace) {
    $modules: $moduleNamespace + $modules;
  }

  // We are creating a root module, so create a global variable
  @if not $nested {
    $module: $modules !global;
    $this: $modules !global;
  }

  @each $module in $modules {
    $selectors: list.join($selectors, '.#{$module}', comma);
    $selectors: list.join($selectors, '[class*=".#{$module}#{$modifierGlue}"]', comma);
  }

  #{$selectors} {
    @if not $nested {
      @include module-content($modules, $config);
    }

    @content;

    @include parse-cq($content);
  }
}

/// Render a module's content
///
/// @param {string|list} $module
/// @param {map} $config
@mixin module-content($module, $config) {
  /// Extend modifiers into the naked module
  @if map.get($config, 'modifiers') {
    @include extend(map.get($config, 'modifiers'));
  }

  /// Combine modifiers into a new, single modifier
  @if map.get($config, 'combine') {
    @each $new-modifier, $target-modifiers in map.get($config, 'combine') {
      @include modifier($new-modifier) {
        @include extend(($target-modifiers));
      }
    }
  }

  @if $outputCSSFromConfig and $module == map.get($config, 'name') {
    @include parse-cq($config);
  }
}

/// Alias for module() mixin
///
/// @param {string|list} $modules - The module(s) you wish to create
@mixin modules($modules...) {
  @include module($modules...) {
    @content;
  }
}
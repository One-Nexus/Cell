@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

/// Create a new module
///
/// @param {string} $module - The module you wish to create
/// @param {map} $content
/// @param {map} $config
@mixin module($module: null, $content: (), $config: ()) {
  $nested: &;
  $selectors: ();
  $uid: string.unique-id();

  @if not $module {
    @if (map.has-key($config, "name")) {
      $module: map.get($config, "name");
    } @else {
      $module: $uid;
    }
  }

  // We are creating a root module, so create a global variable
  @if not $nested {
    $module: $module !global;
    $this: $module !global;
  }

  $selectors: list.join($selectors, ".#{$module}", comma);
  $selectors: list.join($selectors, '[class*="#{$module}#{$modifierGlue}"]', comma);

  #{$selectors} {
    @if not $nested {
      @include module-content($module, $config);
    }

    @content;

    @include parse-cq($content);
  }
}

/// Render a module's content
///
/// @param {string|list} $module
/// @param {map} $config
/// @param {string} $uid
@mixin module-content($module, $config) {
  /// Extend modifiers into the naked module
  @if map.get($config, "modifiers") {
    @include extend(map.get($config, "modifiers"));
  }

  /// Combine modifiers into a new, single modifier
  @if map.get($config, "combine") {
    @each $new-modifier, $target-modifiers in map.get($config, "combine") {
      @include modifier($new-modifier) {
        @include extend(($target-modifiers));
      }
    }
  }

  @if $outputCSSFromConfig and $module == map.get($config, "name") {
    @include parse-cq($config);
  }
}

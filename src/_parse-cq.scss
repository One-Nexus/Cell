@use "sass:selector";
@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "sass:string";

@use "node_modules/Sass-Boost/dist/sass-boost";

@use "utilities/utils";

/// Parse CQ
///
/// @param {map} $map - The map from which to parse CQ
/// @param {bool} $sub-component
/// @param {bool} $prevContext
@mixin parse-cq($map, $sub-component: false, $prevContext: false) {
  @each $property, $value in $map {
    @if meta.type-of($property) == 'string' {
      // $property is for parent wrapper/group element
      @if $property == 'group' or $property == 'wrapper' {
        @include wrapper($property, if($prevContext, $prevContext, $globalNamespace)) {
          @include parse-cq($value);
        }
      }

      // Determine if current node is queried modifier/state
      @else if string.index($property, 'is-') == 1 {
        @include modifier(sass-boost.str-replace($property, 'is-', '')) {
          @include parse-cq($value);
        }
      }

      // Determine if parent module/block is queried modifier/state
      @else if string.index($property, '$-is-') == 1 or string.index($property, '$:') == 1 {
        $context: if(
          string.index($property, '$:') == 1, 
          sass-boost.str-replace($property, '$', ''), 
          sass-boost.str-replace($property, '$-is-', '')
        );

        @include context($globalNamespace, $context) {
          @include parse-cq($value, $prevContext: ($globalNamespace, $context));
        }
      }

      // Determine if previously specified parent component is queried modifier/state
      @else if string.index($property, 'and-is-') == 1 or string.index($property, 'and:') == 1 {
        $context: if(
          string.index($property, 'and-is-'),
          sass-boost.str-replace($property, 'and-is-', ''),
          string.slice($property, string.index($property, ':'), string.length($property))
        );

        $prevContextBlock: list.nth($prevContext, 1);
        $prevContextContext: list.nth($prevContext, 2);
        $newContext: list.append($prevContextContext, $context);

        $prevChunk: utils.create-context-selector(
          $prevContextBlock, $prevContextContext, $modifierGlue, $componentGlue
        );

        $newChunk: utils.create-context-selector(
          $prevContextBlock, $newContext, $modifierGlue, $componentGlue, $pipeContexts: true
        );

        $selector: ();

        @each $pChunk in $prevChunk {
          @each $chunk in selector.parse(sass-boost.str-replace(#{$newChunk}, ' ', ', ')) {
            @if string.index(#{$chunk}, $pChunk) == 1 {
              @each $item in & {
                @if string.index(#{$item}, $pChunk) {
                  $selector: list.append($selector, selector.replace($item, $pChunk, $chunk), comma);
                }
              }
            }
          }
        }

        @at-root {
          #{$selector} {
            @include parse-cq($value, $prevContext: ($prevContextBlock, $newContext));
          }
        }
      }

      // Determine if specified parent component/module is queried modifier/state
      @else if str-index($property, '-is-') or (string.index($property, ':') and string.index($property, ':') > 1) {
        $component: if(
          string.index($property, ':'),
          string.slice($property, 1, string.index($property, ':') - 1),
          string.slice($property, 1, string.index($property, '-is-') - 1)
        );

        $contextVal: if(
          string.index($property, ':'),
          string.slice($property, string.index($property, ':'), string.length($property)),
          string.slice($property, string.index($property, '-is-') + 4, string.length($property))
        );

        $block: if(
          string.index($component, '$') == 1, 
          string.slice($component, 2), 
          $globalNamespace
        );

        $context: if(
          string.index($component, '$') == 1, 
          ($block, $contextVal), 
          (($block, $component), $contextVal)
        );

        @if $component == 'group' or $component == 'wrapper' {
          $context: ($component, ($prevContext, $contextVal), true);
        }

        @include context($context...) {
          @include parse-cq($value, $prevContext: $context);
        }
      }

      // Determine if current node is a child of the queried component/module
      @else if string.index($property, 'in-') == 1 {
        $component: sass-boost.str-replace($property, 'in-', '');

        $context: if(
          string.index($component, '$') == 1, 
          string.slice($component, 2), 
          ($globalNamespace, $component)
        );

        @include context($context) {
          @include parse-cq($value, $prevContext: ($context, ''));
        }
      }

      // $property defines pseudo-state/pseudo-element
      @else if string.index($property, ':') == 1 {
        @include pseudo-state(sass-boost.str-replace($property, ':', '')) {
          @include parse-cq($value);
        }
      }

      // $property defines .active styles
      @else if $property == 'active' {
        @include modifier('active') {
          @include parse-cq($value);
        }
      }

      // $property is for a component
      @else if meta.type-of($value) == 'map' {
        @include component($property, $sub-component: $sub-component) {
          @include parse-cq($value, $sub-component: true, $prevContext: $property);
        }
      }

      // $property is a valid CSS property
      @else if list.index(utils.$css-properties, $property) {
        @if meta.type-of($value) != 'map' {
          // for before/after pseudo elements
          @if $property == 'content' {
            $value: '"#{$value}"';
          }

          #{$property}: $value;
        }
      }
    }
  }
}